 function dataset_gene(I_IBG,β) 
#----------------------------------IEEE-30 Bus System Data Introduction----------------------------------
df = DataFrame(CSV.File( "/Users/ME2/Desktop/scl_ieee30/SGpara.csv") ) 
SGpara=df[:,:]
df = DataFrame(CSV.File( "/Users/ME2/Desktop/scl_ieee30/Linespara.csv" )) 
linepara=df[:,:]

#-----------------------------------Calculate Admittance Matrixs for SCC constraints----------------------------------
numnodes=30                         # number of nodes
branch_num= size(linepara, 1)       # number of branches
Yₗᵢₙₑ= zeros(numnodes, numnodes)     # define admittance matrix of the transmission lines
Yₛ₉ = zeros(numnodes, numnodes)      # define admittance matrix of the SGs

for k in 1:branch_num               #  calculate the ADMITTANCE MATRIX of the transmission lines
    i = linepara[k, 1]                  # bus from
    j = linepara[k, 2]                   # bus to
    Yₗᵢₙₑ[i, j] = -1/linepara[k, 4]*2        # off-diagonal elements
    Yₗᵢₙₑ[j, i] = Yₗᵢₙₑ[i, j]                # symmetry
end
for k in 1:numnodes
    Yₗᵢₙₑ[k, k] = -sum(Yₗᵢₙₑ[k, :])           # diagonal elements 
end  

for k in 1:size(SGpara, 1)                  # calculate the ADMITTANCE MATRIX of the SGs
    i = SGpara[k, 1]                         # bus from
    Yₛ₉[i, i] = 1/SGpara[k, 2]/3               # diagonal elements 
end 

num_IBG=3
Eₛ₉=1
Eₛ₉=β*Eₛ₉
Iₛ₉=zeros(1,size(SGpara, 1))
for k in 1:size(SGpara, 1)
    Iₛ₉[1,k]=Eₛ₉/SGpara[k, 2]/3
end


#------------Evaluate the SCC at fault bus F, let's say F=4, for the generator in bus 4
Ω=2^(size(SGpara, 1)+num_IBG)    # dimension of the data set, which is generated by evaluating SCC
I_sc₄=zeros(Ω,1)               # SCC at fault bus F=4
ηm=zeros(Ω,15)           # product of each pair of SGs

combinations = collect(product(0:1, 0:1, 0:1, 0:1, 0:1, 0:1, 0:1, 0:1, 0:1))   # generate all combinations of 9 binary variables
matrix = hcat([collect(combo) for combo in combinations]...)  # convert the combination to a matrix
matrix = transpose(matrix)  # transpose the matrix to make it 512 rows and 9 columns

for k in 1:Ω
    ηm[k,1] = matrix[k,1]*matrix[k,2]
    ηm[k,2] = matrix[k,1]*matrix[k,3]
    ηm[k,3] = matrix[k,1]*matrix[k,4]
    ηm[k,4] = matrix[k,1]*matrix[k,5]   
    ηm[k,5] = matrix[k,1]*matrix[k,6]

    ηm[k,6] = matrix[k,2]*matrix[k,3]
    ηm[k,7] = matrix[k,2]*matrix[k,4]
    ηm[k,8] = matrix[k,2]*matrix[k,5]
    ηm[k,9] = matrix[k,2]*matrix[k,6]

    ηm[k,10] = matrix[k,3]*matrix[k,4]
    ηm[k,11] = matrix[k,3]*matrix[k,5]
    ηm[k,12] = matrix[k,3]*matrix[k,6]

    ηm[k,13] = matrix[k,4]*matrix[k,5]
    ηm[k,14] = matrix[k,4]*matrix[k,6]

    ηm[k,15] = matrix[k,5]*matrix[k,6]
end

matrix_ω=hcat(matrix,ηm)
# 定义在循环外部的变量
status_SGs = zeros(1, size(SGpara, 1))  # define status of SGs
status_IBG = zeros(1, num_IBG)  # define status of IBG
Yₛ₉_status = zeros(numnodes, numnodes)  # define the admittance matrix for SGs status
Y_total = zeros(numnodes, numnodes)  # define the total admittance matrix
Z = zeros(numnodes, numnodes)  # define the impedance matrix
I_sc₄=zeros(Ω,1)               # SCC at fault bus F=4

for k in 1:Ω
    status_SGs = matrix_ω[k, 1:size(SGpara, 1)]  # status of SGs
    status_IBG = matrix_ω[k, size(SGpara, 1) + 1:size(SGpara, 1) + num_IBG]  # status of IBG
    Yₛ₉_status .= 0  # reset Yₛ₉_status matrix
    for i in 1:size(SGpara, 1)
        Yₛ₉_status[SGpara[i, 1], SGpara[i, 1]] = 1/SGpara[i, 2]/3 * status_SGs[i]  # status of SGs
    end

    Y_total .= Yₗᵢₙₑ + Yₛ₉_status  # calculate the total admittance matrix
    Z .= inv(Y_total)  # calculate the impedance matrix

    I_sc₄[k] = (Z[4,2]*Iₛ₉[1]*status_SGs[1]+ Z[4,3]*Iₛ₉[2]*status_SGs[2]+ Z[4,4]*Iₛ₉[3]*status_SGs[3]+
    Z[4,5]*Iₛ₉[4]*status_SGs[4]+ Z[4,27]*Iₛ₉[5]*status_SGs[5]+ Z[4,30]*Iₛ₉[6]*status_SGs[6]+
    Z[4,1]*I_IBG*status_IBG[1]+ Z[4,23]*I_IBG*status_IBG[2]+ Z[4,26]*I_IBG*status_IBG[3])/Z[4,4]   # calculate the SCC at fault bus F=4
end

return I_sc₄, matrix_ω




end
